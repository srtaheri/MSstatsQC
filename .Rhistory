dat <- data.frame(QCno = c(),
pr.y = c(),
group = c(),
metric = c())
for (metric in data.metrics) {
data.1   <- XmR.Summary.prepare(data, metric = metric, L, U,type = "mean",
selectMean = listMean[[metric]],selectSD = listSD[[metric]])
data.2   <- XmR.Summary.prepare(data, metric = metric, L, U,type = "dispersion",
selectMean = listMean[[metric]],selectSD = listSD[[metric]])
data.2$pr.y <- -(data.2$pr.y)
dat <- rbind(dat, data.1, data.2)
}
return(dat)
}
############################################################################################
heatmap.DataFrame <- function(data, data.metrics,method,
peptideThresholdRed,peptideThresholdYellow, L, U,
type, listMean, listSD) {
time <- c()
val <- c()
met <- c()
bin <- c()
for (metric in data.metrics) {
df <- Decision.DataFrame.prepare(data, metric, method,
peptideThresholdRed,peptideThresholdYellow,
L, U,type, selectMean = listMean[[metric]],
selectSD=listSD[[metric]])
time_df <- as.character(df$AcquiredTime)
val_df <- df$pr.y
met_df <- rep(metric,length(val_df))
bin_df <- df$bin
time <- c(time,time_df)
val <- c(val,val_df)
met <- c(met,met_df)
bin <- c(bin,bin_df)
}
dataFrame <- data.frame(time = time,
value = val,
metric = met,
bin = bin
)
return(dataFrame)
}
############################################################################################
Compute.QCno.OutOfRangePeptide.XmR <- function(data,L,U,metric,type,
XmR.type,selectMean,selectSD) {
precursors <- levels(data$Precursor)
QCno.out.range <- c()
for(j in seq_len(length(precursors))) {
metricData <- getMetricData(data, precursors[j], L = L, U = U,
metric = metric, normalization = TRUE,selectMean,selectSD)
plot.data <- XmR.data.prepare(data, metricData , L = L, U = U, type,selectMean,selectSD)
if(XmR.type == "poz")
QCno.out.range <- c(QCno.out.range,length(plot.data[plot.data$t >= plot.data$UCL, ]$QCno))
else
QCno.out.range <- c(QCno.out.range,length(plot.data[plot.data$t <= plot.data$LCL, ]$QCno))
}
return(QCno.out.range)
}
#############################################################################################
Compute.QCno.OutOfRangePeptide.CUSUM <- function(data,L,U,metric,type,
CUSUM.type,selectMean,selectSD) {
h <- 5
precursors <- levels(data$Precursor)
QCno.out.range <- c()
for(j in seq_len(length(precursors))) {
metricData <- getMetricData(data, precursors[j], L, U, metric = metric,
normalization = TRUE,selectMean,selectSD)
plot.data <- CUSUM.data.prepare(data, metricData, precursors[j], type)
if(CUSUM.type == "poz")
QCno.out.range <- c(QCno.out.range,
length(plot.data[plot.data$CUSUM.poz >= h | plot.data$CUSUM.poz <= -h, ]$QCno))
else
QCno.out.range <- c(QCno.out.range,
length(plot.data[plot.data$CUSUM.neg >= h | plot.data$CUSUM.neg <= -h, ]$QCno))
}
return(QCno.out.range)
}
###############################################################################################################
XmR.Radar.Plot.prepare <- function(data,L,U, metric, type,group,
XmR.type,selectMean,selectSD) {
precursors <- levels(data$Precursor)
precursors2 <- substring(precursors, first = 1, last = 3)
QCno.length <- c()
QCno.out.range.poz <- c()
QCno.out.range.neg <- c()
for(j in seq_len(length(precursors))) {
metricData <- getMetricData(data, precursors[j], L = L, U = U,
metric = metric, normalization = TRUE,
selectMean,selectSD)
QCno.length <- c(QCno.length,length(metricData))
plot.data <- XmR.data.prepare(data, metricData , L = L, U = U,
type ,selectMean,selectSD)
QCno.out.range.poz <- c(QCno.out.range.poz,
length(plot.data[plot.data$t >= plot.data$UCL, ]$QCno))
QCno.out.range.neg <- c(QCno.out.range.neg,
length(plot.data[plot.data$t <= plot.data$LCL, ]$QCno))
}
if(XmR.type == "poz") {
dat <- data.frame(peptides = precursors2,
OutRangeQCno  = QCno.out.range.poz,
group         = rep(group,length(precursors)),
#orderby       = seq(1:length(precursors)),
orderby       = seq(seq_along(precursors)),
metric        = rep(metric, length(precursors)),
tool          = rep("XmR",length(precursors)),
probability   = QCno.out.range.poz/QCno.length
)
} else {
dat <- data.frame(peptides = precursors2,
OutRangeQCno  = QCno.out.range.neg,
group         = rep(group,length(precursors)),
#orderby       = seq(1:length(precursors)),
orderby       = seq(seq_along(precursors)),
metric        = rep(metric, length(precursors)),
tool          = rep("XmR",length(precursors)),
probability   = QCno.out.range.neg/QCno.length
)
}
return(dat)
}
################################################################################################
XmR.Radar.Plot.DataFrame <- function(data, data.metrics, L,U, listMean, listSD) {
dat <- data.frame(peptides = c(), OutRangeQCno = c(), group = c(),
orderby = c(), metric = c(), tool = c(),
probability   = c()
)
for (metric in data.metrics) {
data.1 <- XmR.Radar.Plot.prepare(data,L,U,metric = metric,
type = "mean",group = "Metric mean increase",
XmR.type = "poz",
selectMean = listMean[[metric]],selectSD = listSD[[metric]])
data.2 <- XmR.Radar.Plot.prepare(data,L,U,metric = metric,
type = "mean",group = "Metric mean decrease",
XmR.type = "neg",
selectMean = listMean[[metric]],selectSD = listSD[[metric]])
data.3 <- XmR.Radar.Plot.prepare(data,L,U,metric = metric,
type = "dispersion",group = "Metric dispersion increase",
XmR.type = "poz",
selectMean = listMean[[metric]],selectSD = listSD[[metric]])
data.4 <- XmR.Radar.Plot.prepare(data,L,U,metric = metric,
type = "dispersion",group = "Metric dispersion decrease",
XmR.type = "neg",
selectMean = listMean[[metric]],selectSD = listSD[[metric]])
dat <- rbind(dat, data.1, data.2, data.3, data.4)
}
return(dat)
}
#################################################################################################################
CUSUM.Radar.Plot.prepare <- function(data,L,U, metric,type,group,
CUSUM.type,selectMean, selectSD) {
h <- 5
precursors <- levels(data$Precursor)
precursors2 <- substring(precursors, first = 1, last = 3)
QCno.length <- c()
QCno.out.range <- c()
#for(j in 1:length(precursors)) {
for(j in seq_along(precursors)) {
metricData <- getMetricData(data, precursors[j], L = L, U = U,
metric = metric, normalization = TRUE, selectMean, selectSD)
QCno.length <- c(QCno.length,length(metricData))
plot.data <- CUSUM.data.prepare(data, metricData, precursors[j], type)
if(CUSUM.type == "poz")
QCno.out.range <- c(QCno.out.range,
length(plot.data[plot.data$CUSUM.poz >= h |
plot.data$CUSUM.poz <= -h, ]$QCno))
else
QCno.out.range <- c(QCno.out.range,
length(plot.data[plot.data$CUSUM.neg >= h |
plot.data$CUSUM.neg <= -h, ]$QCno))
}
dat <- data.frame(peptides = precursors2,
OutRangeQCno  = QCno.out.range,
group         = rep(group,length(precursors)),
#orderby       = seq(1:length(precursors)),
orderby       = seq(seq_along(precursors)),
metric        = rep(metric, length(precursors)),
tool          = rep("XmR",length(precursors)),
probability   = QCno.out.range/QCno.length
)
return(dat)
}
#################################################################################################
CUSUM.Radar.Plot.DataFrame <- function(data, data.metrics, L,U, listMean, listSD) {
dat <- data.frame(peptides = c(), OutRangeQCno = c(), group = c(),
orderby = c(), metric = c(), tool = c(),
probability   = c()
)
for (metric in data.metrics) {
data.1 <- CUSUM.Radar.Plot.prepare(data,L,U, metric = metric, type = "mean",
group = "Metric mean increase",CUSUM.type = "poz",
selectMean = listMean[[metric]],selectSD = listSD[[metric]])
data.2 <- CUSUM.Radar.Plot.prepare(data,L,U, metric = metric, type = "mean",
group = "Metric mean decrease", CUSUM.type = "neg",
selectMean = listMean[[metric]],selectSD = listSD[[metric]])
data.3 <- CUSUM.Radar.Plot.prepare(data,L,U, metric = metric, type = "dispersion",
group = "Metric dispersion increase", CUSUM.type = "poz",
selectMean = listMean[[metric]],selectSD = listSD[[metric]])
data.4 <- CUSUM.Radar.Plot.prepare(data,L,U, metric = metric, type = "dispersion",
group = "Metric dispersion decrease", CUSUM.type = "neg",
selectMean = listMean[[metric]],selectSD = listSD[[metric]])
dat <- rbind(dat, data.1, data.2, data.3, data.4)
}
return(dat)
}
#######################################################################################################
Decision.DataFrame.prepare <- function(data, metric, method, peptideThresholdRed,
peptideThresholdYellow, L, U,type, selectMean, selectSD) {
h <- 5
AcquiredTime <- data$AcquiredTime
#QCno    <- 1:nrow(data)
QCno    <- seq_len(nrow(data))
y <- rep(0,nrow(data))
counter <- rep(0,nrow(data))
precursors <- levels(data$Precursor)
if(method == "XmR") {
for(precursor in precursors) {
metricData <- getMetricData(data, precursor, L = L, U = U,
metric = metric, normalization = TRUE,selectMean,selectSD)
#counter[1:length(metricData)] <- counter[1:length(metricData)]+1
counter[seq_along(metricData)] <- counter[ seq_along(metricData)]+1
plot.data <- XmR.data.prepare(data, metricData , L , U , type,selectMean,selectSD)
sub <- plot.data[plot.data$InRangeOutRange == "OutRange",]
y[sub$QCno] <- y[sub$QCno] + 1
}
} else if(method == "CUSUM") {
for(precursor in precursors) {
metricData <- getMetricData(data, precursor, L = L, U = U,
metric = metric, normalization = TRUE,
selectMean,selectSD)
#counter[1:length(metricData)] <- counter[1:length(metricData)]+1
counter[seq_along(metricData)] <- counter[seq_along(metricData)]+1
plot.data <- CUSUM.data.prepare(data, metricData, precursor, type)
sub <- plot.data[(plot.data$CUSUM.poz >= h |
plot.data$CUSUM.poz <= -h) |
(plot.data$CUSUM.neg >= h |
plot.data$CUSUM.neg <= -h), ]
y[sub$QCno] <- y[sub$QCno] + 1
}
}
max_QCno <- max(which(counter!=0))
#pr.y = y[1:max_QCno]/counter[1:max_QCno]
pr.y = y[seq_len(max_QCno)]/counter[seq_len(max_QCno)]
#plot.data <- data.frame(AcquiredTime = AcquiredTime[1:max_QCno],
plot.data <- data.frame(AcquiredTime = AcquiredTime[seq_len(max_QCno)],
#QCno = rep(1:max_QCno,1),
QCno = rep(seq_len(max_QCno),1),
pr.y = pr.y,
group = ifelse(rep(type==1,max_QCno),
rep("Metric mean",max_QCno),
rep("Metric dispersion",max_QCno)
),
metric = rep(metric,max_QCno),
bin = rep(0,max_QCno)
)
#for (i in 1:max_QCno) {
for (i in seq_len(max_QCno)) {
if(plot.data$pr.y[i] > peptideThresholdRed){
plot.data$bin[i] <- "Unacceptable"
}
else if(plot.data$pr.y[i] > peptideThresholdYellow){
plot.data$bin[i] <- "Poor"
}
else {
plot.data$bin[i] <- "Acceptable"
}
}
if(type == 2) {
return(plot.data[-1,])
}
return(plot.data)
}
#######################################################################################################
number.Of.Out.Of.Range.Metrics <- function(data,data.metrics,method,
peptideThresholdRed, peptideThresholdYellow,
L, U, type, listMean, listSD) {
metricCounterAboveRed = 0
metricCounterAboveYellowBelowRed = 0
precursors <- levels(data$Precursor)
for (metric in data.metrics) {
#QCno    <- 1:nrow(data)
QCno    <- seq_len(nrow(data))
y <- rep(0,nrow(data))
counter <- rep(0,nrow(data))
for(precursor in precursors) {
metricData <- getMetricData(data, precursor, L = L, U = U, metric = metric,
normalization = TRUE,listMean[[metric]],listSD[[metric]])
#counter[1:length(metricData)] <- counter[1:length(metricData)]+1
counter[seq_along(metricData)] <- counter[seq_along(metricData)]+1
#if(method == "XmR") {
plot.data <- XmR.data.prepare(data, metricData , L , U ,type,
selectMean = listMean[[metric]],selectSD = listSD[[metric]])
#}
sub <- plot.data[plot.data$InRangeOutRange == "OutRange",]
y[sub$QCno] <- y[sub$QCno] + 1
}
max_QCno <- max(which(counter!=0))
#pr.y = y[1:max_QCno]/counter[1:max_QCno]
pr.y = y[seq_len(max_QCno)]/counter[seq_len(max_QCno)]
if(type == 2) {
pr.y <- pr.y[-1]
}
aboveYellow <- which(pr.y > peptideThresholdYellow)
aboveYellowBelowRed <- which(pr.y > peptideThresholdYellow & pr.y <= peptideThresholdRed)
if(length(which(pr.y > peptideThresholdRed)) > 0) {
metricCounterAboveRed = metricCounterAboveRed + 1
}
if(length(aboveYellowBelowRed) > 0) {
metricCounterAboveYellowBelowRed = metricCounterAboveYellowBelowRed + 1
}
}
return(c(metricCounterAboveRed,metricCounterAboveYellowBelowRed))
}
####################################################################################################
SummaryPlot <- function(data = NULL, L = 1, U = 5, method = "CUSUM",
listMean=NULL, listSD=NULL) {
if(is.null(data))
return()
if(!is.data.frame(data)){
stop(data)
}
dat <- NULL
data.metrics <- c(find_custom_metrics(data))
remove <- c("MinStartTime","MaxEndTime")
data.metrics <- data.metrics[!data.metrics %in% remove]
if(method == "CUSUM"){
dat <- CUSUM.Summary.DataFrame(data, data.metrics, L, U,listMean,listSD)
}else if(method == "XmR") {
dat <- XmR.Summary.DataFrame(data,data.metrics, L, U, listMean, listSD)
}
tho.hat.df <- get_CP_tho.hat(data, L, U, data.metrics, listMean, listSD)
gg <- ggplot(dat)
gg <- gg + geom_hline(yintercept=0, alpha=0.5)
gg <- gg + geom_smooth(method="loess",aes(x=dat$QCno, y=dat$pr.y,colour = dat$group,
group = dat$group))
gg <- gg + geom_point(data = tho.hat.df, aes(x = tho.hat.df$tho.hat, y = tho.hat.df$y,
colour = "Change point"))
gg <- gg + scale_color_manual(breaks = c("Metric mean increase",
"Metric mean decrease",
"Metric dispersion increase",
"Metric dispersion decrease",
"Change point"),
values = c("Metric mean increase" = "#E69F00",
"Metric mean decrease" = "#56B4E9",
"Metric dispersion increase" = "#009E73",
"Metric dispersion decrease" = "#D55E00",
"Change point" = "red"),
guide='legend')
gg <- gg + guides(colour = guide_legend(override.aes = list(linetype=c(1,1,1,1,0),
shape=c(NA,NA,NA,NA,16))))
gg <- gg + facet_wrap(~metric,nrow = ceiling(length(data.metrics)/4))
gg <- gg + annotate("text", x = 15, y = 1.3, label = "Mean")
gg <- gg + annotate("text", x = 25, y = -1.3, label = "Dispersion")
gg <- gg + scale_y_continuous(expand=c(0,0), limits = c(-1.4,1.4),
breaks = c(1,0.5,0,-0.5,-1) ,labels = c(1,0.5,0,"0.5","1"))
gg <- gg + labs(x = "QC No", y = "% of out of control \nprecursors")
gg <- gg + theme(plot.title = element_text(size=15, face="bold",
margin = margin(10, 0, 10, 0)),
axis.text.x=element_text(size=12, vjust=0.5),
axis.text.y=element_text(size=12, hjust=0.5),
axis.title.y=element_text(size=12),
axis.title.x=element_text(size=12),
legend.text = element_text(size = 12),
legend.title=element_blank(),
plot.margin = unit(c(1,3,1,1), "lines")
)
theme_set(theme_gray(base_size = 15)) # this will change the size of all
#the texts in all ggplot function
gg
}
metricData <- getMetricData(data = S9Site54, peptide = "VLVLDTDYK", L = 1, U = 5,
metric = "Best.RT", normalization = FALSE,
selectMean = NULL, selectSD = NULL)
df_func <- CUSUM.data.prepare(prodata = S9Site54, metricData = metricData, "VLVLDTDYK", "mean")[1:5,]
df_func <- CUSUM.data.prepare(data = S9Site54, metricData = metricData, "VLVLDTDYK", "mean")[1:5,]
View(df_func)
seq(1,5)
df_func
library(MSstatsQC)
devtools::check()
df_func <- CUSUM.data.prepare(data = S9Site54, metricData = metricData, "VLVLDTDYK", "mean")[1:5,]
df <- data.frame(QCno = seq(1,5), CUSUM.poz = c(0.00,24.20,48.23,72.32,96.44),
CUSUM.neg = c(0,0,0,0,0),
outRangeInRangePoz = c("InRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+"),
outRangeInRangeNeg = c("InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-"))
df_func
df
df <- data.frame(QCno = seq(1,5), CUSUM.poz = c(0.00,24.20,48.23,72.32,96.44),
CUSUM.neg = c(0,0,0,0,0), Annotations = NULL,
outRangeInRangePoz = c("InRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+"),
outRangeInRangeNeg = c("InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-"))
df <- data.frame(QCno = seq(1,5), CUSUM.poz = c(0.00,24.20,48.23,72.32,96.44),
CUSUM.neg = c(0,0,0,0,0), Annotations = C("","","","",""),
outRangeInRangePoz = c("InRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+"),
outRangeInRangeNeg = c("InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-"))
df <- data.frame(QCno = seq(1,5), CUSUM.poz = c(0.00,24.20,48.23,72.32,96.44),
CUSUM.neg = c(0,0,0,0,0), Annotations = C(NA,NA,NA,NA,NA),
outRangeInRangePoz = c("InRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+"),
outRangeInRangeNeg = c("InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-"))
df <- data.frame(QCno = seq(1,5), CUSUM.poz = c(0.00,24.20,48.23,72.32,96.44),
CUSUM.neg = c(0,0,0,0,0), Annotations,
outRangeInRangePoz = c("InRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+"),
outRangeInRangeNeg = c("InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-"))
df <- data.frame(QCno = seq(1,5), CUSUM.poz = c(0.00,24.20,48.23,72.32,96.44),
CUSUM.neg = c(0,0,0,0,0), Annotations = c(1,1,1,1,1),
outRangeInRangePoz = c("InRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+"),
outRangeInRangeNeg = c("InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-"))
df$Annotations <- NA
df
df_func <- CUSUM.data.prepare(data = S9Site54, metricData = metricData, "VLVLDTDYK", "mean")[1:5,]
expect_true(identical(df_func,df))
str(df$Annotations)
str(df_func$Annotations)
df_func <- CUSUM.data.prepare(data = S9Site54, metricData = metricData, "VLVLDTDYK", "mean")[1:5,]
df_func$Annotations <- NA
df <- data.frame(QCno = seq(1,5), CUSUM.poz = c(0.00,24.20,48.23,72.32,96.44),
CUSUM.neg = c(0,0,0,0,0), Annotations = c(1,1,1,1,1),
outRangeInRangePoz = c("InRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+"),
outRangeInRangeNeg = c("InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-"))
df$Annotations <- NA
expect_true(identical(df_func,df))
str(df_func$Annotations)
str(df$Annotations)
df_func
df
identical(df_func,df)
expect_equal(df_func,df)
df_func <- CUSUM.data.prepare(data = S9Site54, metricData = metricData, "VLVLDTDYK", "mean")[1:5,]
df_func$Annotations <- NA
df <- data.frame(QCno = seq(1,5), CUSUM.poz = c(0.00,24.20,48.23,72.32,96.44),
CUSUM.neg = c(0,0,0,0,0), Annotations = c(1,1,1,1,1),
outRangeInRangePoz = c("InRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+","OutRangeCUSUM+"),
outRangeInRangeNeg = c("InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-","InRangeCUSUM-"))
expect_equal(df_func,df)
library(MSstatsQC)
devtools::check()
metricData <- getMetricData(data = S9Site54, peptide = "VLVLDTDYK", L = 1, U = 5,
metric = "Best.RT", normalization = FALSE,
selectMean = NULL, selectSD = NULL)
df_func <- CP.data.prepare(data = S9Site54, metricData = metricData, type = "mean")[1:5,]
df_func
df <- data.frame(QCno = seq(1,5), Et = c(27444.17,26834.08,26232.39,25627.73,25021.59),
tho.hat = c(1,1,1,1,1)
)
df
expect_equal(df_func,df)
identical(df_func,df)
expect_equal(df_func,df-8.046526e-08)
expect_equal(10, 10 + 1e-7)
expect_equal(df$QCno,df_func$QCno)
expect_equal(df$Et,df_func$Et)
df
df_func
df <- data.frame(QCno = seq(1,5), Et = c(27444,26834,26232,25627,25021),
tho.hat = c(1,1,1,1,1)
)
expect_equal(df_func,df)
df_func <- CP.data.prepare(data = S9Site54, metricData = metricData, type = "mean")[1:5,]
df_func
floor(df_func$Et)
df_func <- CP.data.prepare(data = S9Site54, metricData = metricData, type = "mean")[1:5,]
df_func$Et <- floor(df_func$Et)
df <- data.frame(QCno = seq(1,5), Et = c(27444.17,26834.08,26232.39,25627.73,25021.59),
tho.hat = c(1,1,1,1,1)
)
expect_equal(df_func,df)
df <- data.frame(QCno = seq(1,5), Et = c(27444,26834,26232,25627,25021),
tho.hat = c(1,1,1,1,1)
)
expect_equal(df_func,df)
library(MSstatsQC)
get_CP_tho.hat <- function(data, L, U, data.metrics, listMean, listSD) {
tho.hat <- data.frame(tho.hat = c(), metric = c(), group = c(), y=c())
precursors <- levels(data$Precursor)
for(metric in data.metrics) {
#for (j in 1:nlevels(data$Precursor)) {
for (j in seq_len(nlevels(data$Precursor))) {
metricData <- getMetricData(data, precursors[j], L, U, metric = metric,normalization = TRUE,
selectMean = listMean[[metric]],selectSD = listSD[[metric]])
mix <- rbind(
data.frame(tho.hat = CP.data.prepare(data, metricData, type = "mean")$tho.hat[1],
metric = metric, group = "Individual Value", y=1.1),
data.frame(tho.hat = CP.data.prepare(data, metricData, type = "dispersion")$tho.hat[1],
metric = metric, group = "Moving Range", y=-1.1)
)
tho.hat <- rbind(tho.hat, mix)
}
}
return(tho.hat)
}
library(MSstatsQC)
View(df)
head(S9Site54)
get_CP_tho.hat(data = S9Site54, L = 1, U = 5, data.metrics = c("Best.RT","TotalArea","MaxFWHM"), NULL,NULL)
get_CP_tho.hat(data = S9Site54, L = 1, U = 5, data.metrics = c("Best.RT"), NULL,NULL)
get_CP_tho.hat(data = S9Site54, L = 1, U = 5, data.metrics = c("Best.RT"), NULL,NULL)[1:5,1]
get_CP_tho.hat(data = S9Site54, L = 1, U = 5, data.metrics = c("Best.RT"), NULL,NULL)[1:10,1]
c(get_CP_tho.hat(data = S9Site54, L = 1, U = 5, data.metrics = c("Best.RT"), NULL,NULL)[1:10,1])
expect_equal(c(get_CP_tho.hat(data = S9Site54, L = 1, U = 5, data.metrics = c("Best.RT"), NULL,NULL)[1:10,1]), c(5,45,5,45,5,45,38,45,16,45))
library(testthat)
expect_equal(c(get_CP_tho.hat(data = S9Site54, L = 1, U = 5, data.metrics = c("Best.RT"), NULL,NULL)[1:10,1]), c(5,45,5,45,5,45,38,45,16,45))
library(MSstatsQC)
devtools::check()
rnorm(3,0,1)
mvrnorm(n = 3, mu = c(1,1), sigma = c(1,1))
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
mvrnorm(n = 3, mu = c(1,1), sigma = c(1,1))
mvrnorm(n = 3, mu = c(1,1), sigma = matrix(c(10,3,3,2),2,2))
Sigma <- matrix(c(10,3,3,2),2,2)
Sigma
mvrnorm(n = 3, rep(0, 2), Sigma)
var(mvrnorm(n = 1000, rep(0, 2), Sigma))
