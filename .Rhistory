MSstatsQC::RunShiny(NULL)
library(MSstatsQC)
MSstatsQC::RunShiny(NULL)
library(MSstatsQC)
MSstatsQC::RunShiny(NULL)
library(MSstatsQC)
data2 <- read.csv("/Users/sarataheri/GitHub/msstats-qc/Datasets/Study9.1-Site86.csv")
MSstatsQC::RunShiny(data2)
library(MSstatsQC)
data2 <- read.csv("/Users/sarataheri/GitHub/msstats-qc/Datasets/Study9.1-Site86.csv")
MSstatsQC::RunShiny(data2)
library(MSstatsQC)
data2 <- read.csv("/Users/sarataheri/GitHub/msstats-qc/Datasets/Study9.1-Site86.csv")
MSstatsQC::RunShiny(data2)
library(MSstatsQC)
MSstatsQC::RunShiny(data2)
library(MSstatsQC)
MSstatsQC::RunShiny(data2)
runApp('GitHub/msstats-qc')
MSstatsQC::RunShiny(data2)
library(MSstatsQC)
MSstatsQC::RunShiny(data2)
MSstatsQC::RunShiny(data2)
library(MSstatsQC)
MSstatsQC::RunShiny(data2)
library(MSstatsQC)
MSstatsQC::RunShiny(data2)
library(MSstatsQC)
MSstatsQC::RunShiny(data2)
runApp('GitHub/msstats-qc')
library(MSstatsQC)
data2 <- read.csv("/Users/sarataheri/GitHub/msstats-qc/Datasets/Study9.1-Site86.csv")
MSstatsQC::RunShiny(data2)
library(MSstatsQC)
MSstatsQC::RunShiny(data2)
runApp('GitHub/msstats-qc')
runApp('GitHub/msstats-qc')
library(MSstatsQC)
data2 <- read.csv("/Users/sarataheri/GitHub/msstats-qc/Datasets/Study9.1-Site86.csv")
MSstatsQC::RunShiny(data2)
runApp('GitHub/msstats-qc')
MSstatsQC::RunShiny(data2)
MSstatsQC::RunShiny(data2)
library(MSstatsQC)
MSstatsQC::RunShiny(data2)
library(MSstatsQC)
devtools::check()
devtools::check()
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
devtools::check()
library(MSstatsQC)
library(MSstatsQC)
devtools::check()
library(MSstatsQC)
library(MSstatsQC)
devtools::check()
library(MSstatsQC)
library(MSstatsQC)
devtools::check()
library(MSstatsQC)
devtools::check()
library(MSstatsQC)
devtools::check()
library(MSstatsQC)
devtools::check()
load("~/GitHub/MSstatsQC/data/S9Site54.RData")
?MSstatsQC::XmRSummaryPlots
library("MSstatsQC", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
?MSstatsQC::XmRSummaryPlots
??XmRSummaryPlots
library(MSstatsQC)
?XmRSummaryPlots
library(MSstats)
?MSstats::dataProcess
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
devtools::check()
library(MSstatsQC)
devtools::check()
load("~/GitHub/MSstatsQC/.RData")
load("~/GitHub/MSstatsQC/data/S9Site54.RData")
load("/Users/sarataheri/GitHub/MSstatsQC/data/S9Site54.RData")
library(MSstatsQC)
devtools::check()
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
devtools::check()
library(MSstatsQC)
devtools::check()
load("~/GitHub/MSstatsQC/data/S9Site54.RData")
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
devtools::check()
library(MSstatsQC)
devtools::check()
library(MSstatsQC)
devtools::check()
library(MSstatsQC)
devtools::check()
devtools::build()
source("https://bioconductor.org/biocLite.R")
biocLite("BiocCheck")
BiocCheck::BiocCheck()
BiocCheck::BiocCheck("MSstatsQC")
BiocCheck::BiocCheck("/Users/sarataheri/GitHub/MSstatsQC")
MSstatsQC::S9Site54
library("MSstatsQC", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
?MSstats::dataProcess
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
?ChangePointEstimator
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
sampleData <- MSstatsQC::S9Site54
head(sampleData)
DataProcess(sampleData)
sampleData <- DataProcess(sampleData)
head(sampleData)
library(MSstatsQC)
sampleData <- MSstatsQC::S9Site54
sampleData <- DataProcess(sampleData)
levels(sampleData$Precursor)
library(MSstatsQC)
mean(sampleData$BestRetentionTime)
sd(sampleData$BestRetentionTime)
library(MSstatsQC)
mean(sampleData$TotalArea)
sd(sampleData$TotalArea)
View(sampleData)
library(MSstatsQC)
?ChangePointEstimator
library(MSstatsQC)
?ChangePointEstimator
library(MSstatsQC)
?ChangePointEstimator
library(MSstatsQC)
library(MSstatsQC)
?XmRPlots
library(MSstatsQC)
library(MSstatsQC)
library(MSstatsQC)
?DataProcess
library(MSstatsQC)
sampleData <- DataProcess(sampleData)
head(sampleData)
mean(sampleData$BestRetentionTime)
mean(sampleData$TotalArea)
mean(sampleData$MaxFWHM)
mean(sampleData$`Peak Assymetry`)
sd(sampleData$`Peak Assymetry`)
sd(sampleData$MaxFWHM)
sd(sampleData$TotalArea)
sd(sampleData$BestRetentionTime)
library(MSstatsQC)
?CUSUM.Radar.Plot
library(MSstatsQC)
?CUSUM.Radar.Plot
library(MSstatsQC)
?CUSUM.Radar.Plot
library(MSstatsQC)
?DecisionMaker
library(MSstatsQC)
library(MSstatsQC)
?CUSUMSummaryPlots
library(MSstatsQC)
library(MSstatsQC)
BiocCheck::BiocCheck("/Users/sarataheri/GitHub/MSstatsQC")
BiocCheck::BiocCheck("/Users/sarataheri/GitHub/MSstatsQC")
library(MSstatsQC)
library(MSstatsQC)
BiocCheck::BiocCheck("/Users/sarataheri/GitHub/MSstatsQC")
library(MSstatsQC)
BiocCheck::BiocCheck("/Users/sarataheri/GitHub/MSstatsQC")
library(MSstatsQC)
BiocCheck::BiocCheck("/Users/sarataheri/GitHub/MSstatsQC")
getwd()
devtools::use_vignette("MSstatsQC_v1.0.0_vignette")
library(MSstatsQC)
BiocCheck::BiocCheck("/Users/sarataheri/GitHub/MSstatsQC")
library(MSstatsQC)
library(MSstatsQC)
BiocCheck::BiocCheck("/Users/sarataheri/GitHub/MSstatsQC")
library(MSstatsQC)
BiocCheck::BiocCheck("/Users/sarataheri/GitHub/MSstatsQC")
library(MSstatsQC)
BiocCheck::BiocCheck("/Users/sarataheri/GitHub/MSstatsQC")
library(MSstatsQC)
BiocCheck::BiocCheck("/Users/sarataheri/GitHub/MSstatsQC")
library(MSstatsQC)
BiocCheck::BiocCheck("/Users/sarataheri/GitHub/MSstatsQC")
devtools::check()
library(MSstatsQC)
devtools::check()
library(MSstatsQC)
devtools::check()
library(MSstatsQC)
devtools::check()
devtools::build()
BiocCheck::BiocCheck("/Users/sarataheri/GitHub/MSstatsQC")
library(MSstatsQC)
devtools::check()
library(MSstatsQC)
library(MSstatsQC)
seq(1,5,0.5)
plot(x = seq(1,2,0.01), y = (-2*x^2+5*x-1))
x = seq(1,2,0.01)
y = -2*x^2+5*x-1
y
plot(x,y)
points(x = c(0,0.5),y = (0.1,0.2))
points(c(0,0.5), c(0.1,0.2))
points(c(1.2,1.3), c(0.1,0.2))
plot(x,y)
points(c(1.2,1.3), c(0.1,0.2))
points(c(1.2,1.3), c(1,1.2))
seq(1,2,0.5)+1
knitr::opts_chunk$set(echo = TRUE)
x = seq(1,2,0.01)
y = -2*x^2+5*x-1
plot(x , y, xlim = c(-2,2))
plot(x , y, xlim = c(-2,2))
points(seq(-1,1,0.1),seq(-1,1,0.1)+1)
points(seq(-1,1,0.1),seq(-1,1,0.1)+1)
plot(x , y, xlim = c(-2,2))
points(seq(-1,1,0.1),seq(-1,1,0.1)+1)
library(data.table)
SAheart <- fread('https://statweb.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data')
SAheart <- as.data.frame(SAheart)
SAheart$famhist <- factor(SAheart$famhist)
factor(SAheart$famhist)
install.packages("tree")
install.packages("randomeForest")
install.packages("randomForest")
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(data.table)
SAheart <- fread('https://statweb.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data')
SAheart <- as.data.frame(SAheart)
SAheart_No_row <- nrow(SAheart)
SAheart_No_row
set.seed(231)
train_row <- sample(1:462,231)
validation_row <- c(1:462)[-train_row]
SAheart_train <- SAheart[train_row,]
SAheart_train <- SAheart_train[,-1]
SAheart_validation <- SAheart[validation_row,]
SAheart_validation <- SAheart_validation[,-1]
library(randomForest)
View(SAheart_train)
randomForest(chd~., SAheart_train, mtry=9, importance=TRUE, ntree = 1)
randomForest(as.factor(chd)~., SAheart_train, mtry=9, importance=TRUE, ntree = 1)
randomForest(as.factor(chd)~., SAheart_train, mtry=2, importance=TRUE, ntree = 1)
randomForest(chd~., SAheart_train, mtry=2, importance=TRUE, ntree = 1)
str(SAheart)
install.packages("gbm")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("caret")
R.Version()
range[-5]
abs(round(0.2))
abs(round(-2))
View(SAheart)
library(data.table)
SAheart <- fread('https://statweb.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data')
SAheart <- as.data.frame(SAheart)
sa_heart <- fread('https://statweb.stanford.edu/~tibs/ElemStatLearn/datasets/SAheart.data')
sa_heart <- as.data.frame(SAheart)
sah_train <- sa_heart[sample(x=1:nrow(sa_heart), size=nrow(sa_heart)*.5),]
sah_test <- sa_heart[!(rownames(sa_heart) %in% rownames(sah_train)),]
View(sah_train)
sah_train <- sah_train[,2:11]
sah_test <- sah_test[,2:11]
set.seed(1000)
test_error <- c()
for (i in 1:length(lambdas)) {
boost_sa<- gbm(chd~.,data=test_Boost, distribution = "bernoulli", n.trees = 1000, shrinkage = lambdas[i])
pred.test <- predict(boost_sa, test_Boost[,1:9], n.trees = 1000)
pred.table <- abs(round(pred.test))
test_error[i] <- abs(1- sum(abs(pred.table - test_Boost$chd))/nrow(test_Boost))
}
pows <- seq(-1, -10, by = -.1)
lambdas <- 10^pows
test_error <- c()
train_error <- c()
for (i in 1:length(lambdas)) {
boost_sa<- gbm(chd~.,data=test_Boost, distribution = "bernoulli", n.trees = 1000, shrinkage = lambdas[i])
pred.test <- predict(boost_sa, test_Boost[,1:9], n.trees = 1000)
print(pred.test)
pred.table <- abs(round(pred.test))
test_error[i] <- abs(1- sum(abs(pred.table - test_Boost$chd))/nrow(test_Boost))
}
library(gbm)
for (i in 1:length(lambdas)) {
boost_sa<- gbm(chd~.,data=test_Boost, distribution = "bernoulli", n.trees = 1000, shrinkage = lambdas[i])
pred.test <- predict(boost_sa, test_Boost[,1:9], n.trees = 1000)
print(pred.test)
pred.table <- abs(round(pred.test))
test_error[i] <- abs(1- sum(abs(pred.table - test_Boost$chd))/nrow(test_Boost))
}
for (i in 1:length(lambdas)) {
boost_sa<- gbm(chd~.,data=train_Boost, distribution = "bernoulli", n.trees = 1000, shrinkage = lambdas[i])
pred.train <- predict(boost_sa, train_Boost[,1:9], n.trees = 1000)
print(pred.train)
pred.table <- abs(round(pred.train))
train_error[i] <- abs(1- sum(abs(pred.table - train_Boost$chd))/nrow(train_Boost))
}
train_Boost <- sah_train
test_Boost <- sah_test
train_Boost$famhist<- gsub("Present","1",train_Boost$famhist)
train_Boost$famhist<- gsub("Absent","0",train_Boost$famhist)
test_Boost$famhist <- gsub("Present","1",test_Boost$famhist)
test_Boost$famhist <- gsub("Absent","0",test_Boost$famhist)
train_Boost$famhist <- as.numeric(train_Boost$famhist)
test_Boost$famhist <- as.numeric(test_Boost$famhist)
train_Boost$chd <- as.numeric(as.character(train_Boost$chd))
test_Boost$chd <- as.numeric(as.character(test_Boost$chd))
for (i in 1:length(lambdas)) {
boost_sa<- gbm(chd~.,data=train_Boost, distribution = "bernoulli", n.trees = 1000, shrinkage = lambdas[i])
pred.train <- predict(boost_sa, train_Boost[,1:9], n.trees = 1000)
print(pred.train)
pred.table <- abs(round(pred.train))
train_error[i] <- abs(1- sum(abs(pred.table - train_Boost$chd))/nrow(train_Boost))
}
for (i in 1:length(lambdas)) {
boost_sa<- gbm(chd~.,data=train_Boost, distribution = "bernoulli", n.trees = 1000, shrinkage = lambdas[i])
pred.train <- predict(boost_sa, train_Boost[,1:9], n.trees = 1000)
print(pred.train)
pred.table <- abs(round(pred.train))
train_error[i] <- abs(1- sum(abs(pred.table - train_Boost$chd))/nrow(train_Boost))
}
for (i in 1:length(lambdas)) {
boost_sa<- gbm(chd~.,data=train_Boost, distribution = "bernoulli", n.trees = 1000, shrinkage = lambdas[i])
pred.train <- predict(boost_sa, train_Boost[,1:9], n.trees = 1000)
print(pred.train)
pred.table <- abs(round(pred.train))
train_error[i] <- abs(1- sum(abs(pred.table - train_Boost$chd))/nrow(train_Boost))
}
abs(round(-1.42898961))
load("~/GitHub/MSstatsQC/.RData")
RunShiny()
getwd()
save(mydata, file="data/S9Site54.RData")
save(S9Site54, file="data/S9Site54.RData")
load("~/GitHub/MSstatsQC/data/S9Site54.RData")
save(S9Site54, file="data/S9Site54.RData")
getwd()
setwd("~/GitHub/MSstatsQC")
install.packages("testthat")
library("testthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
getwd()
save(Study9.1-Site54, file="data/Study9.1-Site54.RData")
save(Study9.1-Site54, file="data/Study9.1-Site54.RData")
save("Study9.1-Site54", file="data/Study9.1-Site54.RData")
Study9.1-Site54 <- read.csv("/Users/sarataheri/GitHub/MSstatsQC/Study9.1-Site54.csv")
S9Site54 <- read.csv("/Users/sarataheri/Desktop/S9Site54.csv")
save("S9Site54", file="data/S9Site54.RData")
load("~/GitHub/MSstatsQC/data/S9Site54.RData")
library(MSstatsQC)
library(MSstatsQC)
attr(S9Site54, "time")
S9Site54$pheno
getwd()
list.files()
setwd("..")
getwd()
list.files()
roxygen2::roxygenize("MSstatsQC")
system("R CMD build MSstatsQC --no-build-vignettes")
system("R CMD INSTALL MSstatsQC")
library(MSstatsQC)
system("R CMD build MSstatsQC")
system("R CMD INSTALL MSstatsQC_1.0.0.tar.gz")
list.files()
library(MSstatsQC)
data("S9Site54")
head(S9Site54)
vignette("MSstatsQc")
vignette("MSstatsQC")
system("R CMD build MSstatsQC")
system("R CMD INSTALL MSstatsQC_1.0.0.tar.gz")
library(MSstatsQC)
vignette("MSstatsQC")
browseVignettes("MSstatsQC")
system("R CMD check MSstatsQC_1.0.0.tar.gz")
system("R CMD build MSstatsQC")
library(MSstatsQC)
library(MSstatsQC)
system("R CMD check MSstatsQC_1.0.0.tar.gz")
library(MSstatsQC)
library(MSstatsQC)
roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace', 'vignette'))
roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace', 'vignette'))
library(MSstatsQC)
?ChangePointEstimator
roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace', 'vignette'))
?ChangePointEstimator
roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace', 'vignette'))
?ChangePointEstimator
roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace', 'vignette'))
library(MSstatsQC)
?ChangePointEstimator
library(MSstatsQC)
roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace', 'vignette'))
?ChangePointEstimator
R.Version()
R.Version()
R.Version()
library(MSstatsQC)
devtools::use_testthat()
library(testthat)
str(mtcars)
expect_output(str(mtcars), "11 VARIABLES", ignore.case = TRUE)
a <- expect_output(str(mtcars), "11 VARIABLES", ignore.case = TRUE)
a
expect_output(str(mtcars), "$ mpg", fixed = TRUE)
a <- list(1:10, letters)
expect_output(str(a), "List of 2")
library(lubridate)
test_that("floor_date works for different units", {
base <- as.POSIXct("2009-08-03 12:01:59.23", tz = "UTC")
expect_equal(floor_date(base, "second"),
as.POSIXct("2009-08-03 12:01:59", tz = "UTC"))
expect_equal(floor_date(base, "minute"),
as.POSIXct("2009-08-03 12:01:00", tz = "UTC"))
expect_equal(floor_date(base, "hour"),
as.POSIXct("2009-08-03 12:00:00", tz = "UTC"))
expect_equal(floor_date(base, "day"),
as.POSIXct("2009-08-03 00:00:00", tz = "UTC"))
expect_equal(floor_date(base, "week"),
as.POSIXct("2009-08-02 00:00:00", tz = "UTC"))
expect_equal(floor_date(base, "month"),
as.POSIXct("2009-08-01 00:00:00", tz = "UTC"))
expect_equal(floor_date(base, "year"),
as.POSIXct("2009-01-01 00:00:00", tz = "UTC"))
})
floor_date(base, "second")
base <- as.POSIXct("2009-08-03 12:01:59.23", tz = "UTC")
expect_equal(floor_date(base, "second")
as.POSIXct("2009-08-03 12:01:59", tz = "UTC")
floor_date(base, "second")
img()
devtools::install_github("MangoTheCat/visualTest")
library(visualTest)
png(filename = "test1.png")
img()
dev.off()
png(filename = "test2.png")
plot(1:11,
png(filename = "test2.png")
plot(1:11, col="red")
dev.off()
getFingerprint(file = "test1.png")
img <- function() {
plot(1:10)
}
png(filename = "test1.png")
img()
dev.off()
png(filename = "test2.png")
plot(1:11, col="red")
dev.off()
getFingerprint(file = "test1.png")
getFingerprint(file = "test2.png")
isSimilar(file = "test2.png",
fingerprint = getFingerprint(file = "test1.png"),threshold = 0.1)
a <- c(1,2,3,4,5)
1:length(a)
seq_len(5)
for(i in seq_len(5)){ print(i)}
seq_len(a)
seq_along(a)
seq_len(5)
library(MSstatsQC)
1:(length(a)-1)
seq_along(a)-1
seq_along(a-1)
best_colnames <- list(
c("AcquiredTime","Acquired.Time","time"),
#c("Retention Time","BestRetentionTime" ,"Best.RT","best retention time",
#  "retention time","rt","best ret time","intensity"),
#c("Full Width at Half Maximum","MaxFWHM","fwhm","max.fwhm", "Max FWHM"),
#c("Total Peak Area","Total Area","TotalArea","total area","TA","T.Area"),
c("MinStartTime","min start time","Min Start Time"),
c("MaxEndTime", "max end time","Max End Time"),
c("Precursor","PeptideSequence"),
c("Annotations","anotations")
)
seq_along(best_colnames)
col <- best_colnames[[1]]
seq_along(col)
